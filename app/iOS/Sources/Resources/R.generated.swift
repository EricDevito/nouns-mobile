//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 2 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `launch.screen.background`.
    static let launchScreenBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "launch.screen.background")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "launch.screen.background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func launchScreenBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.launchScreenBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "launch.screen.background", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func launchScreenBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.launchScreenBackground.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 41 images.
  struct image {
    /// Image `confetti-10`.
    static let confetti10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "confetti-10")
    /// Image `confetti-1`.
    static let confetti1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "confetti-1")
    /// Image `confetti-2`.
    static let confetti2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "confetti-2")
    /// Image `confetti-3`.
    static let confetti3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "confetti-3")
    /// Image `confetti-4`.
    static let confetti4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "confetti-4")
    /// Image `confetti-5`.
    static let confetti5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "confetti-5")
    /// Image `confetti-6`.
    static let confetti6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "confetti-6")
    /// Image `confetti-7`.
    static let confetti7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "confetti-7")
    /// Image `confetti-8`.
    static let confetti8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "confetti-8")
    /// Image `confetti-9`.
    static let confetti9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "confetti-9")
    /// Image `create-noun-pizza`.
    static let createNounPizza = Rswift.ImageResource(bundle: R.hostingBundle, name: "create-noun-pizza")
    /// Image `explore-onboarding`.
    static let exploreOnboarding = Rswift.ImageResource(bundle: R.hostingBundle, name: "explore-onboarding")
    /// Image `eyes-blink_1`.
    static let eyesBlink_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyes-blink_1")
    /// Image `eyes-blink_2`.
    static let eyesBlink_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyes-blink_2")
    /// Image `eyes-blink_3`.
    static let eyesBlink_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyes-blink_3")
    /// Image `eyes-blink_4`.
    static let eyesBlink_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyes-blink_4")
    /// Image `eyes-blink_5`.
    static let eyesBlink_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyes-blink_5")
    /// Image `eyes-shift_0`.
    static let eyesShift_0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyes-shift_0")
    /// Image `eyes-shift_1`.
    static let eyesShift_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyes-shift_1")
    /// Image `eyes-shift_2`.
    static let eyesShift_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyes-shift_2")
    /// Image `eyes-shift_3`.
    static let eyesShift_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyes-shift_3")
    /// Image `eyes-shift_4`.
    static let eyesShift_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyes-shift_4")
    /// Image `eyes-shift_5`.
    static let eyesShift_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyes-shift_5")
    /// Image `eyes-shift_6`.
    static let eyesShift_6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyes-shift_6")
    /// Image `head-ape-mouth_1`.
    static let headApeMouth_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "head-ape-mouth_1")
    /// Image `head-ape-mouth_2`.
    static let headApeMouth_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "head-ape-mouth_2")
    /// Image `head-ape-mouth_3`.
    static let headApeMouth_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "head-ape-mouth_3")
    /// Image `head-ape-mouth_4`.
    static let headApeMouth_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "head-ape-mouth_4")
    /// Image `head-ape-mouth_5`.
    static let headApeMouth_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "head-ape-mouth_5")
    /// Image `home-slice-chat`.
    static let homeSliceChat = Rswift.ImageResource(bundle: R.hostingBundle, name: "home-slice-chat")
    /// Image `noun-logo`.
    static let nounLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "noun-logo")
    /// Image `noun`.
    static let noun = Rswift.ImageResource(bundle: R.hostingBundle, name: "noun")
    /// Image `onboarding-create-background`.
    static let onboardingCreateBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding-create-background")
    /// Image `onboarding-explore-background`.
    static let onboardingExploreBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding-explore-background")
    /// Image `onboarding-noun-background`.
    static let onboardingNounBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding-noun-background")
    /// Image `onboarding-play-background`.
    static let onboardingPlayBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding-play-background")
    /// Image `pizza-noun`.
    static let pizzaNoun = Rswift.ImageResource(bundle: R.hostingBundle, name: "pizza-noun")
    /// Image `placeholder-ens`.
    static let placeholderEns = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder-ens")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `shadow`.
    static let shadow = Rswift.ImageResource(bundle: R.hostingBundle, name: "shadow")
    /// Image `shark-noun`.
    static let sharkNoun = Rswift.ImageResource(bundle: R.hostingBundle, name: "shark-noun")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "confetti-1", bundle: ..., traitCollection: ...)`
    static func confetti1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confetti1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "confetti-10", bundle: ..., traitCollection: ...)`
    static func confetti10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confetti10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "confetti-2", bundle: ..., traitCollection: ...)`
    static func confetti2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confetti2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "confetti-3", bundle: ..., traitCollection: ...)`
    static func confetti3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confetti3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "confetti-4", bundle: ..., traitCollection: ...)`
    static func confetti4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confetti4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "confetti-5", bundle: ..., traitCollection: ...)`
    static func confetti5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confetti5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "confetti-6", bundle: ..., traitCollection: ...)`
    static func confetti6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confetti6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "confetti-7", bundle: ..., traitCollection: ...)`
    static func confetti7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confetti7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "confetti-8", bundle: ..., traitCollection: ...)`
    static func confetti8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confetti8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "confetti-9", bundle: ..., traitCollection: ...)`
    static func confetti9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confetti9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "create-noun-pizza", bundle: ..., traitCollection: ...)`
    static func createNounPizza(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.createNounPizza, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "explore-onboarding", bundle: ..., traitCollection: ...)`
    static func exploreOnboarding(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exploreOnboarding, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyes-blink_1", bundle: ..., traitCollection: ...)`
    static func eyesBlink_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyesBlink_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyes-blink_2", bundle: ..., traitCollection: ...)`
    static func eyesBlink_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyesBlink_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyes-blink_3", bundle: ..., traitCollection: ...)`
    static func eyesBlink_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyesBlink_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyes-blink_4", bundle: ..., traitCollection: ...)`
    static func eyesBlink_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyesBlink_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyes-blink_5", bundle: ..., traitCollection: ...)`
    static func eyesBlink_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyesBlink_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyes-shift_0", bundle: ..., traitCollection: ...)`
    static func eyesShift_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyesShift_0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyes-shift_1", bundle: ..., traitCollection: ...)`
    static func eyesShift_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyesShift_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyes-shift_2", bundle: ..., traitCollection: ...)`
    static func eyesShift_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyesShift_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyes-shift_3", bundle: ..., traitCollection: ...)`
    static func eyesShift_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyesShift_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyes-shift_4", bundle: ..., traitCollection: ...)`
    static func eyesShift_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyesShift_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyes-shift_5", bundle: ..., traitCollection: ...)`
    static func eyesShift_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyesShift_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyes-shift_6", bundle: ..., traitCollection: ...)`
    static func eyesShift_6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyesShift_6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "head-ape-mouth_1", bundle: ..., traitCollection: ...)`
    static func headApeMouth_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.headApeMouth_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "head-ape-mouth_2", bundle: ..., traitCollection: ...)`
    static func headApeMouth_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.headApeMouth_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "head-ape-mouth_3", bundle: ..., traitCollection: ...)`
    static func headApeMouth_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.headApeMouth_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "head-ape-mouth_4", bundle: ..., traitCollection: ...)`
    static func headApeMouth_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.headApeMouth_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "head-ape-mouth_5", bundle: ..., traitCollection: ...)`
    static func headApeMouth_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.headApeMouth_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home-slice-chat", bundle: ..., traitCollection: ...)`
    static func homeSliceChat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeSliceChat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "noun", bundle: ..., traitCollection: ...)`
    static func noun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noun, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "noun-logo", bundle: ..., traitCollection: ...)`
    static func nounLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nounLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding-create-background", bundle: ..., traitCollection: ...)`
    static func onboardingCreateBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingCreateBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding-explore-background", bundle: ..., traitCollection: ...)`
    static func onboardingExploreBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingExploreBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding-noun-background", bundle: ..., traitCollection: ...)`
    static func onboardingNounBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingNounBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding-play-background", bundle: ..., traitCollection: ...)`
    static func onboardingPlayBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingPlayBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pizza-noun", bundle: ..., traitCollection: ...)`
    static func pizzaNoun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pizzaNoun, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder-ens", bundle: ..., traitCollection: ...)`
    static func placeholderEns(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholderEns, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shadow", bundle: ..., traitCollection: ...)`
    static func shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shadow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shark-noun", bundle: ..., traitCollection: ...)`
    static func sharkNoun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sharkNoun, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = true

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 24 localization tables.
  struct string {
    /// This `R.string.aboutNouns` struct is generated, and contains static references to 3 localization keys.
    struct aboutNouns {
      /// Value: Learn more at nouns.wtf
      static let learnMore = Rswift.StringResource(key: "learn.more", tableName: "AboutNouns", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Nouns are an experimental attempt to improve the formation of on-chain avatar communities.   While some projects have attempted to bootstrap digital community and identity, Nouns attempt to bootstrap identity, community, governance and a treasury that can be used by the community for the creation of long-term value.
      static let nounsWtfDescription = Rswift.StringResource(key: "nouns.wtf.description", tableName: "AboutNouns", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: WTF?
      static let title = Rswift.StringResource(key: "title", tableName: "AboutNouns", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Learn more at nouns.wtf
      static func learnMore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("learn.more", tableName: "AboutNouns", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AboutNouns", preferredLanguages: preferredLanguages) else {
          return "learn.more"
        }

        return NSLocalizedString("learn.more", tableName: "AboutNouns", bundle: bundle, comment: "")
      }

      /// Value: Nouns are an experimental attempt to improve the formation of on-chain avatar communities.   While some projects have attempted to bootstrap digital community and identity, Nouns attempt to bootstrap identity, community, governance and a treasury that can be used by the community for the creation of long-term value.
      static func nounsWtfDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nouns.wtf.description", tableName: "AboutNouns", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AboutNouns", preferredLanguages: preferredLanguages) else {
          return "nouns.wtf.description"
        }

        return NSLocalizedString("nouns.wtf.description", tableName: "AboutNouns", bundle: bundle, comment: "")
      }

      /// Value: WTF?
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "AboutNouns", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AboutNouns", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "AboutNouns", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.about` struct is generated, and contains static references to 4 localization keys.
    struct about {
      /// Value: About
      static let title = Rswift.StringResource(key: "title", tableName: "About", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Learn more at nouns.wtf
      static let learnMore = Rswift.StringResource(key: "learn.more", tableName: "About", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Treasury
      static let treasury = Rswift.StringResource(key: "treasury", tableName: "About", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: https://nouns.wtf
      static let aboutLink = Rswift.StringResource(key: "about.link", tableName: "About", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: About
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "About", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "About", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "About", bundle: bundle, comment: "")
      }

      /// Value: Learn more at nouns.wtf
      static func learnMore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("learn.more", tableName: "About", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "About", preferredLanguages: preferredLanguages) else {
          return "learn.more"
        }

        return NSLocalizedString("learn.more", tableName: "About", bundle: bundle, comment: "")
      }

      /// Value: Treasury
      static func treasury(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("treasury", tableName: "About", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "About", preferredLanguages: preferredLanguages) else {
          return "treasury"
        }

        return NSLocalizedString("treasury", tableName: "About", bundle: bundle, comment: "")
      }

      /// Value: https://nouns.wtf
      static func aboutLink(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("about.link", tableName: "About", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "About", preferredLanguages: preferredLanguages) else {
          return "about.link"
        }

        return NSLocalizedString("about.link", tableName: "About", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.activity` struct is generated, and contains static references to 7 localization keys.
    struct activity {
      /// Value: Absent for
      static let absent = Rswift.StringResource(key: "absent", tableName: "Activity", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Activity
      static let menuTitle = Rswift.StringResource(key: "menu.title", tableName: "Activity", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No activity
      static let emptyState = Rswift.StringResource(key: "empty-state", tableName: "Activity", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Proposal %s • %s
      static let proposalStatus = Rswift.StringResource(key: "proposal.status", tableName: "Activity", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Untitled
      static let proposalUntitled = Rswift.StringResource(key: "proposal.untitled", tableName: "Activity", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Vote Against
      static let against = Rswift.StringResource(key: "against", tableName: "Activity", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Voted for
      static let `for` = Rswift.StringResource(key: "for", tableName: "Activity", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Absent for
      static func absent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("absent", tableName: "Activity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Activity", preferredLanguages: preferredLanguages) else {
          return "absent"
        }

        return NSLocalizedString("absent", tableName: "Activity", bundle: bundle, comment: "")
      }

      /// Value: Activity
      static func menuTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu.title", tableName: "Activity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Activity", preferredLanguages: preferredLanguages) else {
          return "menu.title"
        }

        return NSLocalizedString("menu.title", tableName: "Activity", bundle: bundle, comment: "")
      }

      /// Value: No activity
      static func emptyState(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("empty-state", tableName: "Activity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Activity", preferredLanguages: preferredLanguages) else {
          return "empty-state"
        }

        return NSLocalizedString("empty-state", tableName: "Activity", bundle: bundle, comment: "")
      }

      /// Value: Proposal %s • %s
      static func proposalStatus(_ value1: UnsafePointer<CChar>, _ value2: UnsafePointer<CChar>, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("proposal.status", tableName: "Activity", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Activity", preferredLanguages: preferredLanguages) else {
          return "proposal.status"
        }

        let format = NSLocalizedString("proposal.status", tableName: "Activity", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// Value: Untitled
      static func proposalUntitled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("proposal.untitled", tableName: "Activity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Activity", preferredLanguages: preferredLanguages) else {
          return "proposal.untitled"
        }

        return NSLocalizedString("proposal.untitled", tableName: "Activity", bundle: bundle, comment: "")
      }

      /// Value: Vote Against
      static func against(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("against", tableName: "Activity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Activity", preferredLanguages: preferredLanguages) else {
          return "against"
        }

        return NSLocalizedString("against", tableName: "Activity", bundle: bundle, comment: "")
      }

      /// Value: Voted for
      static func `for`(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("for", tableName: "Activity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Activity", preferredLanguages: preferredLanguages) else {
          return "for"
        }

        return NSLocalizedString("for", tableName: "Activity", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.appIcon` struct is generated, and contains static references to 1 localization keys.
    struct appIcon {
      /// Value: App icon
      static let title = Rswift.StringResource(key: "title", tableName: "AppIcon", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: App icon
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "AppIcon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppIcon", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "AppIcon", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.audioPermissionDialog` struct is generated, and contains static references to 4 localization keys.
    struct audioPermissionDialog {
      /// Value: Do it later
      static let ignore = Rswift.StringResource(key: "ignore", tableName: "AudioPermissionDialog", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enable microphone
      static let enable = Rswift.StringResource(key: "enable", tableName: "AudioPermissionDialog", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Let's get talkin!
      static let title = Rswift.StringResource(key: "title", tableName: "AudioPermissionDialog", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: To make your noun talk, the app needs your permission to use the microphone.
      static let body = Rswift.StringResource(key: "body", tableName: "AudioPermissionDialog", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Do it later
      static func ignore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ignore", tableName: "AudioPermissionDialog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AudioPermissionDialog", preferredLanguages: preferredLanguages) else {
          return "ignore"
        }

        return NSLocalizedString("ignore", tableName: "AudioPermissionDialog", bundle: bundle, comment: "")
      }

      /// Value: Enable microphone
      static func enable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enable", tableName: "AudioPermissionDialog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AudioPermissionDialog", preferredLanguages: preferredLanguages) else {
          return "enable"
        }

        return NSLocalizedString("enable", tableName: "AudioPermissionDialog", bundle: bundle, comment: "")
      }

      /// Value: Let's get talkin!
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "AudioPermissionDialog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AudioPermissionDialog", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "AudioPermissionDialog", bundle: bundle, comment: "")
      }

      /// Value: To make your noun talk, the app needs your permission to use the microphone.
      static func body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("body", tableName: "AudioPermissionDialog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AudioPermissionDialog", preferredLanguages: preferredLanguages) else {
          return "body"
        }

        return NSLocalizedString("body", tableName: "AudioPermissionDialog", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.audioSettingsDialog` struct is generated, and contains static references to 4 localization keys.
    struct audioSettingsDialog {
      /// Value: Do it later
      static let ignore = Rswift.StringResource(key: "ignore", tableName: "AudioSettingsDialog", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enable Audio in Settings
      static let title = Rswift.StringResource(key: "title", tableName: "AudioSettingsDialog", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open Settings
      static let enable = Rswift.StringResource(key: "enable", tableName: "AudioSettingsDialog", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: To access the play experience, you'll need to enable audio permissions through the Settings app.
      static let body = Rswift.StringResource(key: "body", tableName: "AudioSettingsDialog", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Do it later
      static func ignore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ignore", tableName: "AudioSettingsDialog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AudioSettingsDialog", preferredLanguages: preferredLanguages) else {
          return "ignore"
        }

        return NSLocalizedString("ignore", tableName: "AudioSettingsDialog", bundle: bundle, comment: "")
      }

      /// Value: Enable Audio in Settings
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "AudioSettingsDialog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AudioSettingsDialog", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "AudioSettingsDialog", bundle: bundle, comment: "")
      }

      /// Value: Open Settings
      static func enable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enable", tableName: "AudioSettingsDialog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AudioSettingsDialog", preferredLanguages: preferredLanguages) else {
          return "enable"
        }

        return NSLocalizedString("enable", tableName: "AudioSettingsDialog", bundle: bundle, comment: "")
      }

      /// Value: To access the play experience, you'll need to enable audio permissions through the Settings app.
      static func body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("body", tableName: "AudioSettingsDialog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AudioSettingsDialog", preferredLanguages: preferredLanguages) else {
          return "body"
        }

        return NSLocalizedString("body", tableName: "AudioSettingsDialog", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.bidHistory` struct is generated, and contains static references to 4 localization keys.
    struct bidHistory {
      /// Value: %s at %s
      static let blockDate = Rswift.StringResource(key: "block.date", tableName: "BidHistory", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Bid history
      static let menuTitle = Rswift.StringResource(key: "menu.title", tableName: "BidHistory", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No bid history registered.
      static let emptyState = Rswift.StringResource(key: "empty-state", tableName: "BidHistory", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unavailable
      static let blockUnavailable = Rswift.StringResource(key: "block.unavailable", tableName: "BidHistory", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: %s at %s
      static func blockDate(_ value1: UnsafePointer<CChar>, _ value2: UnsafePointer<CChar>, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("block.date", tableName: "BidHistory", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "BidHistory", preferredLanguages: preferredLanguages) else {
          return "block.date"
        }

        let format = NSLocalizedString("block.date", tableName: "BidHistory", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// Value: Bid history
      static func menuTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu.title", tableName: "BidHistory", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BidHistory", preferredLanguages: preferredLanguages) else {
          return "menu.title"
        }

        return NSLocalizedString("menu.title", tableName: "BidHistory", bundle: bundle, comment: "")
      }

      /// Value: No bid history registered.
      static func emptyState(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("empty-state", tableName: "BidHistory", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BidHistory", preferredLanguages: preferredLanguages) else {
          return "empty-state"
        }

        return NSLocalizedString("empty-state", tableName: "BidHistory", bundle: bundle, comment: "")
      }

      /// Value: Unavailable
      static func blockUnavailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("block.unavailable", tableName: "BidHistory", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BidHistory", preferredLanguages: preferredLanguages) else {
          return "block.unavailable"
        }

        return NSLocalizedString("block.unavailable", tableName: "BidHistory", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.createNounDialog` struct is generated, and contains static references to 5 localization keys.
    struct createNounDialog {
      /// Value: Born %s
      static let nounBirthdayLabel = Rswift.StringResource(key: "noun.birthday.label", tableName: "CreateNounDialog", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Created by you
      static let ownerLabel = Rswift.StringResource(key: "owner.label", tableName: "CreateNounDialog", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Name your noun!
      static let inputPlaceholder = Rswift.StringResource(key: "input.placeholder", tableName: "CreateNounDialog", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save & finish
      static let actionSave = Rswift.StringResource(key: "action.save", tableName: "CreateNounDialog", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Share your noun
      static let actionShare = Rswift.StringResource(key: "action.share", tableName: "CreateNounDialog", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Born %s
      static func nounBirthdayLabel(_ value1: UnsafePointer<CChar>, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("noun.birthday.label", tableName: "CreateNounDialog", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "CreateNounDialog", preferredLanguages: preferredLanguages) else {
          return "noun.birthday.label"
        }

        let format = NSLocalizedString("noun.birthday.label", tableName: "CreateNounDialog", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Created by you
      static func ownerLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("owner.label", tableName: "CreateNounDialog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CreateNounDialog", preferredLanguages: preferredLanguages) else {
          return "owner.label"
        }

        return NSLocalizedString("owner.label", tableName: "CreateNounDialog", bundle: bundle, comment: "")
      }

      /// Value: Name your noun!
      static func inputPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("input.placeholder", tableName: "CreateNounDialog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CreateNounDialog", preferredLanguages: preferredLanguages) else {
          return "input.placeholder"
        }

        return NSLocalizedString("input.placeholder", tableName: "CreateNounDialog", bundle: bundle, comment: "")
      }

      /// Value: Save & finish
      static func actionSave(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("action.save", tableName: "CreateNounDialog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CreateNounDialog", preferredLanguages: preferredLanguages) else {
          return "action.save"
        }

        return NSLocalizedString("action.save", tableName: "CreateNounDialog", bundle: bundle, comment: "")
      }

      /// Value: Share your noun
      static func actionShare(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("action.share", tableName: "CreateNounDialog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CreateNounDialog", preferredLanguages: preferredLanguages) else {
          return "action.share"
        }

        return NSLocalizedString("action.share", tableName: "CreateNounDialog", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.create` struct is generated, and contains static references to 3 localization keys.
    struct create {
      /// Value: Build a completely custom noun
      static let subhealine = Rswift.StringResource(key: "subhealine", tableName: "Create", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create
      static let title = Rswift.StringResource(key: "title", tableName: "Create", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Get going
      static let proceedTitle = Rswift.StringResource(key: "proceed.title", tableName: "Create", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Build a completely custom noun
      static func subhealine(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subhealine", tableName: "Create", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Create", preferredLanguages: preferredLanguages) else {
          return "subhealine"
        }

        return NSLocalizedString("subhealine", tableName: "Create", bundle: bundle, comment: "")
      }

      /// Value: Create
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "Create", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Create", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "Create", bundle: bundle, comment: "")
      }

      /// Value: Get going
      static func proceedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("proceed.title", tableName: "Create", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Create", preferredLanguages: preferredLanguages) else {
          return "proceed.title"
        }

        return NSLocalizedString("proceed.title", tableName: "Create", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.documentation` struct is generated, and contains static references to 4 localization keys.
    struct documentation {
      /// Value: Documentation
      static let title = Rswift.StringResource(key: "title", tableName: "Documentation", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Notion Docs
      static let notionDocs = Rswift.StringResource(key: "notion.docs", tableName: "Documentation", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Nouns are an experimental attempt to improve the formation of on-chain avatar communities
      static let message = Rswift.StringResource(key: "message", tableName: "Documentation", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: https://nouns.notion.site/Explore-Nouns-a2a9dceeb1d54e10b9cbf3f931c2266f
      static let notionLink = Rswift.StringResource(key: "notion.link", tableName: "Documentation", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Documentation
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "Documentation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Documentation", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "Documentation", bundle: bundle, comment: "")
      }

      /// Value: Notion Docs
      static func notionDocs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notion.docs", tableName: "Documentation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Documentation", preferredLanguages: preferredLanguages) else {
          return "notion.docs"
        }

        return NSLocalizedString("notion.docs", tableName: "Documentation", bundle: bundle, comment: "")
      }

      /// Value: Nouns are an experimental attempt to improve the formation of on-chain avatar communities
      static func message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("message", tableName: "Documentation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Documentation", preferredLanguages: preferredLanguages) else {
          return "message"
        }

        return NSLocalizedString("message", tableName: "Documentation", bundle: bundle, comment: "")
      }

      /// Value: https://nouns.notion.site/Explore-Nouns-a2a9dceeb1d54e10b9cbf3f931c2266f
      static func notionLink(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notion.link", tableName: "Documentation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Documentation", preferredLanguages: preferredLanguages) else {
          return "notion.link"
        }

        return NSLocalizedString("notion.link", tableName: "Documentation", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.explore` struct is generated, and contains static references to 3 localization keys.
    struct explore {
      /// Value: About
      static let about = Rswift.StringResource(key: "about", tableName: "Explore", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Explore
      static let title = Rswift.StringResource(key: "title", tableName: "Explore", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Noun %s
      static let noun = Rswift.StringResource(key: "noun", tableName: "Explore", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: About
      static func about(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("about", tableName: "Explore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Explore", preferredLanguages: preferredLanguages) else {
          return "about"
        }

        return NSLocalizedString("about", tableName: "Explore", bundle: bundle, comment: "")
      }

      /// Value: Explore
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "Explore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Explore", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "Explore", bundle: bundle, comment: "")
      }

      /// Value: Noun %s
      static func noun(_ value1: UnsafePointer<CChar>, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("noun", tableName: "Explore", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Explore", preferredLanguages: preferredLanguages) else {
          return "noun"
        }

        let format = NSLocalizedString("noun", tableName: "Explore", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      fileprivate init() {}
    }

    /// This `R.string.liveAuction` struct is generated, and contains static references to 5 localization keys.
    struct liveAuction {
      /// Value: %dh %dm %ds
      static let timeLeft = Rswift.StringResource(key: "time.left", tableName: "LiveAuction", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Current bid
      static let currentBid = Rswift.StringResource(key: "current.bid", tableName: "LiveAuction", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remaining
      static let timeLeftLabel = Rswift.StringResource(key: "time.left.label", tableName: "LiveAuction", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Winner
      static let winner = Rswift.StringResource(key: "winner", tableName: "LiveAuction", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Winning bid
      static let winningBid = Rswift.StringResource(key: "winning.bid", tableName: "LiveAuction", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: %dh %dm %ds
      static func timeLeft(_ value1: Int, _ value2: Int, _ value3: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("time.left", tableName: "LiveAuction", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2, value3)
        }

        guard let (locale, bundle) = localeBundle(tableName: "LiveAuction", preferredLanguages: preferredLanguages) else {
          return "time.left"
        }

        let format = NSLocalizedString("time.left", tableName: "LiveAuction", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2, value3)
      }

      /// Value: Current bid
      static func currentBid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("current.bid", tableName: "LiveAuction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LiveAuction", preferredLanguages: preferredLanguages) else {
          return "current.bid"
        }

        return NSLocalizedString("current.bid", tableName: "LiveAuction", bundle: bundle, comment: "")
      }

      /// Value: Remaining
      static func timeLeftLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("time.left.label", tableName: "LiveAuction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LiveAuction", preferredLanguages: preferredLanguages) else {
          return "time.left.label"
        }

        return NSLocalizedString("time.left.label", tableName: "LiveAuction", bundle: bundle, comment: "")
      }

      /// Value: Winner
      static func winner(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("winner", tableName: "LiveAuction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LiveAuction", preferredLanguages: preferredLanguages) else {
          return "winner"
        }

        return NSLocalizedString("winner", tableName: "LiveAuction", bundle: bundle, comment: "")
      }

      /// Value: Winning bid
      static func winningBid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("winning.bid", tableName: "LiveAuction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LiveAuction", preferredLanguages: preferredLanguages) else {
          return "winning.bid"
        }

        return NSLocalizedString("winning.bid", tableName: "LiveAuction", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 0 localization keys.
    struct localizable {
      fileprivate init() {}
    }

    /// This `R.string.nounDAOInfo` struct is generated, and contains static references to 2 localization keys.
    struct nounDAOInfo {
      /// Value: Each noun is a member of the Nouns DAO and entitled to one vote in all governance matters. This means, once Noun 62 was owned by beautifulpunks.eth, they could vote on proposals to the DAO and this is their voting activity.
      static let description = Rswift.StringResource(key: "description", tableName: "NounDAOInfo", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: What is this?
      static let title = Rswift.StringResource(key: "title", tableName: "NounDAOInfo", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Each noun is a member of the Nouns DAO and entitled to one vote in all governance matters. This means, once Noun 62 was owned by beautifulpunks.eth, they could vote on proposals to the DAO and this is their voting activity.
      static func description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("description", tableName: "NounDAOInfo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NounDAOInfo", preferredLanguages: preferredLanguages) else {
          return "description"
        }

        return NSLocalizedString("description", tableName: "NounDAOInfo", bundle: bundle, comment: "")
      }

      /// Value: What is this?
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "NounDAOInfo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NounDAOInfo", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "NounDAOInfo", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.nounDeleteDialog` struct is generated, and contains static references to 4 localization keys.
    struct nounDeleteDialog {
      /// Value: Are you sure you want to leave and lose the precious Nouniness you’ve created?
      static let message = Rswift.StringResource(key: "message", tableName: "NounDeleteDialog", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: For reals?
      static let title = Rswift.StringResource(key: "title", tableName: "NounDeleteDialog", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No, I want to keep creating
      static let nounCancelAction = Rswift.StringResource(key: "noun.cancel.action", tableName: "NounDeleteDialog", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Yeah, get rid of it
      static let nounDeleteAction = Rswift.StringResource(key: "noun.delete.action", tableName: "NounDeleteDialog", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Are you sure you want to leave and lose the precious Nouniness you’ve created?
      static func message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("message", tableName: "NounDeleteDialog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NounDeleteDialog", preferredLanguages: preferredLanguages) else {
          return "message"
        }

        return NSLocalizedString("message", tableName: "NounDeleteDialog", bundle: bundle, comment: "")
      }

      /// Value: For reals?
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "NounDeleteDialog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NounDeleteDialog", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "NounDeleteDialog", bundle: bundle, comment: "")
      }

      /// Value: No, I want to keep creating
      static func nounCancelAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noun.cancel.action", tableName: "NounDeleteDialog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NounDeleteDialog", preferredLanguages: preferredLanguages) else {
          return "noun.cancel.action"
        }

        return NSLocalizedString("noun.cancel.action", tableName: "NounDeleteDialog", bundle: bundle, comment: "")
      }

      /// Value: Yeah, get rid of it
      static func nounDeleteAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noun.delete.action", tableName: "NounDeleteDialog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NounDeleteDialog", preferredLanguages: preferredLanguages) else {
          return "noun.delete.action"
        }

        return NSLocalizedString("noun.delete.action", tableName: "NounDeleteDialog", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.nounDiscardEditDialog` struct is generated, and contains static references to 4 localization keys.
    struct nounDiscardEditDialog {
      /// Value: Are you sure you want to get rid of this edit and lose the awesomeness?
      static let message = Rswift.StringResource(key: "message", tableName: "NounDiscardEditDialog", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Leavin'?
      static let title = Rswift.StringResource(key: "title", tableName: "NounDiscardEditDialog", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No, I want to keep editing
      static let nounCancelAction = Rswift.StringResource(key: "noun.cancel.action", tableName: "NounDiscardEditDialog", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Yeah, get rid of the edit
      static let nounDeleteAction = Rswift.StringResource(key: "noun.delete.action", tableName: "NounDiscardEditDialog", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Are you sure you want to get rid of this edit and lose the awesomeness?
      static func message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("message", tableName: "NounDiscardEditDialog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NounDiscardEditDialog", preferredLanguages: preferredLanguages) else {
          return "message"
        }

        return NSLocalizedString("message", tableName: "NounDiscardEditDialog", bundle: bundle, comment: "")
      }

      /// Value: Leavin'?
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "NounDiscardEditDialog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NounDiscardEditDialog", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "NounDiscardEditDialog", bundle: bundle, comment: "")
      }

      /// Value: No, I want to keep editing
      static func nounCancelAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noun.cancel.action", tableName: "NounDiscardEditDialog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NounDiscardEditDialog", preferredLanguages: preferredLanguages) else {
          return "noun.cancel.action"
        }

        return NSLocalizedString("noun.cancel.action", tableName: "NounDiscardEditDialog", bundle: bundle, comment: "")
      }

      /// Value: Yeah, get rid of the edit
      static func nounDeleteAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noun.delete.action", tableName: "NounDiscardEditDialog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NounDiscardEditDialog", preferredLanguages: preferredLanguages) else {
          return "noun.delete.action"
        }

        return NSLocalizedString("noun.delete.action", tableName: "NounDiscardEditDialog", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.nounProfile` struct is generated, and contains static references to 11 localization keys.
    struct nounProfile {
      /// Value: %dh %dm %ds
      static let auctionUnsettledTimeLeft = Rswift.StringResource(key: "auction.unsettled.time-left", tableName: "NounProfile", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Activity
      static let auctionSettledGovernanceNounder = Rswift.StringResource(key: "auction.settled.governance.nounder", tableName: "NounProfile", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Bid history
      static let auctionUnsettledGovernance = Rswift.StringResource(key: "auction.unsettled.governance", tableName: "NounProfile", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Bid history & activity
      static let auctionSettledGovernance = Rswift.StringResource(key: "auction.settled.governance", tableName: "NounProfile", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Born %s
      static let birthday = Rswift.StringResource(key: "birthday", tableName: "NounProfile", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Current bid
      static let auctionUnsettledLastBid = Rswift.StringResource(key: "auction.unsettled.last-bid", tableName: "NounProfile", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ends in
      static let auctionUnsettledTimeLeftLabel = Rswift.StringResource(key: "auction.unsettled.time-left.label", tableName: "NounProfile", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Held by
      static let heldBy = Rswift.StringResource(key: "held-by", tableName: "NounProfile", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Nounders
      static let nounders = Rswift.StringResource(key: "nounders", tableName: "NounProfile", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Won for
      static let bidWinner = Rswift.StringResource(key: "bid-winner", tableName: "NounProfile", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: nounders.eth
      static let noundersEth = Rswift.StringResource(key: "nounders.eth", tableName: "NounProfile", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: %dh %dm %ds
      static func auctionUnsettledTimeLeft(_ value1: Int, _ value2: Int, _ value3: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("auction.unsettled.time-left", tableName: "NounProfile", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2, value3)
        }

        guard let (locale, bundle) = localeBundle(tableName: "NounProfile", preferredLanguages: preferredLanguages) else {
          return "auction.unsettled.time-left"
        }

        let format = NSLocalizedString("auction.unsettled.time-left", tableName: "NounProfile", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2, value3)
      }

      /// Value: Activity
      static func auctionSettledGovernanceNounder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("auction.settled.governance.nounder", tableName: "NounProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NounProfile", preferredLanguages: preferredLanguages) else {
          return "auction.settled.governance.nounder"
        }

        return NSLocalizedString("auction.settled.governance.nounder", tableName: "NounProfile", bundle: bundle, comment: "")
      }

      /// Value: Bid history
      static func auctionUnsettledGovernance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("auction.unsettled.governance", tableName: "NounProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NounProfile", preferredLanguages: preferredLanguages) else {
          return "auction.unsettled.governance"
        }

        return NSLocalizedString("auction.unsettled.governance", tableName: "NounProfile", bundle: bundle, comment: "")
      }

      /// Value: Bid history & activity
      static func auctionSettledGovernance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("auction.settled.governance", tableName: "NounProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NounProfile", preferredLanguages: preferredLanguages) else {
          return "auction.settled.governance"
        }

        return NSLocalizedString("auction.settled.governance", tableName: "NounProfile", bundle: bundle, comment: "")
      }

      /// Value: Born %s
      static func birthday(_ value1: UnsafePointer<CChar>, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("birthday", tableName: "NounProfile", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "NounProfile", preferredLanguages: preferredLanguages) else {
          return "birthday"
        }

        let format = NSLocalizedString("birthday", tableName: "NounProfile", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Current bid
      static func auctionUnsettledLastBid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("auction.unsettled.last-bid", tableName: "NounProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NounProfile", preferredLanguages: preferredLanguages) else {
          return "auction.unsettled.last-bid"
        }

        return NSLocalizedString("auction.unsettled.last-bid", tableName: "NounProfile", bundle: bundle, comment: "")
      }

      /// Value: Ends in
      static func auctionUnsettledTimeLeftLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("auction.unsettled.time-left.label", tableName: "NounProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NounProfile", preferredLanguages: preferredLanguages) else {
          return "auction.unsettled.time-left.label"
        }

        return NSLocalizedString("auction.unsettled.time-left.label", tableName: "NounProfile", bundle: bundle, comment: "")
      }

      /// Value: Held by
      static func heldBy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("held-by", tableName: "NounProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NounProfile", preferredLanguages: preferredLanguages) else {
          return "held-by"
        }

        return NSLocalizedString("held-by", tableName: "NounProfile", bundle: bundle, comment: "")
      }

      /// Value: Nounders
      static func nounders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nounders", tableName: "NounProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NounProfile", preferredLanguages: preferredLanguages) else {
          return "nounders"
        }

        return NSLocalizedString("nounders", tableName: "NounProfile", bundle: bundle, comment: "")
      }

      /// Value: Won for
      static func bidWinner(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bid-winner", tableName: "NounProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NounProfile", preferredLanguages: preferredLanguages) else {
          return "bid-winner"
        }

        return NSLocalizedString("bid-winner", tableName: "NounProfile", bundle: bundle, comment: "")
      }

      /// Value: nounders.eth
      static func noundersEth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nounders.eth", tableName: "NounProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NounProfile", preferredLanguages: preferredLanguages) else {
          return "nounders.eth"
        }

        return NSLocalizedString("nounders.eth", tableName: "NounProfile", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.offchainNounActions` struct is generated, and contains static references to 6 localization keys.
    struct offchainNounActions {
      /// Value: Delete your noun
      static let delete = Rswift.StringResource(key: "delete", tableName: "offchain.noun.actions", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Edit your noun
      static let edit = Rswift.StringResource(key: "edit", tableName: "offchain.noun.actions", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: More Actions
      static let title = Rswift.StringResource(key: "title", tableName: "offchain.noun.actions", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Play with you noun
      static let play = Rswift.StringResource(key: "play", tableName: "offchain.noun.actions", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Rename your noun
      static let rename = Rswift.StringResource(key: "rename", tableName: "offchain.noun.actions", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Use this dope new name
      static let useName = Rswift.StringResource(key: "use.name", tableName: "offchain.noun.actions", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Delete your noun
      static func delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete", tableName: "offchain.noun.actions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "offchain.noun.actions", preferredLanguages: preferredLanguages) else {
          return "delete"
        }

        return NSLocalizedString("delete", tableName: "offchain.noun.actions", bundle: bundle, comment: "")
      }

      /// Value: Edit your noun
      static func edit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit", tableName: "offchain.noun.actions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "offchain.noun.actions", preferredLanguages: preferredLanguages) else {
          return "edit"
        }

        return NSLocalizedString("edit", tableName: "offchain.noun.actions", bundle: bundle, comment: "")
      }

      /// Value: More Actions
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "offchain.noun.actions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "offchain.noun.actions", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "offchain.noun.actions", bundle: bundle, comment: "")
      }

      /// Value: Play with you noun
      static func play(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("play", tableName: "offchain.noun.actions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "offchain.noun.actions", preferredLanguages: preferredLanguages) else {
          return "play"
        }

        return NSLocalizedString("play", tableName: "offchain.noun.actions", bundle: bundle, comment: "")
      }

      /// Value: Rename your noun
      static func rename(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rename", tableName: "offchain.noun.actions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "offchain.noun.actions", preferredLanguages: preferredLanguages) else {
          return "rename"
        }

        return NSLocalizedString("rename", tableName: "offchain.noun.actions", bundle: bundle, comment: "")
      }

      /// Value: Use this dope new name
      static func useName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("use.name", tableName: "offchain.noun.actions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "offchain.noun.actions", preferredLanguages: preferredLanguages) else {
          return "use.name"
        }

        return NSLocalizedString("use.name", tableName: "offchain.noun.actions", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.onboarding` struct is generated, and contains static references to 4 localization keys.
    struct onboarding {
      /// Value: Then give it something to say
      static let play = Rswift.StringResource(key: "play", tableName: "Onboarding", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: There are many to explore
      static let explore = Rswift.StringResource(key: "explore", tableName: "Onboarding", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This is a noun
      static let introduction = Rswift.StringResource(key: "introduction", tableName: "Onboarding", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You can create your very own
      static let create = Rswift.StringResource(key: "create", tableName: "Onboarding", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Then give it something to say
      static func play(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("play", tableName: "Onboarding", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Onboarding", preferredLanguages: preferredLanguages) else {
          return "play"
        }

        return NSLocalizedString("play", tableName: "Onboarding", bundle: bundle, comment: "")
      }

      /// Value: There are many to explore
      static func explore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("explore", tableName: "Onboarding", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Onboarding", preferredLanguages: preferredLanguages) else {
          return "explore"
        }

        return NSLocalizedString("explore", tableName: "Onboarding", bundle: bundle, comment: "")
      }

      /// Value: This is a noun
      static func introduction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("introduction", tableName: "Onboarding", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Onboarding", preferredLanguages: preferredLanguages) else {
          return "introduction"
        }

        return NSLocalizedString("introduction", tableName: "Onboarding", bundle: bundle, comment: "")
      }

      /// Value: You can create your very own
      static func create(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("create", tableName: "Onboarding", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Onboarding", preferredLanguages: preferredLanguages) else {
          return "create"
        }

        return NSLocalizedString("create", tableName: "Onboarding", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.play` struct is generated, and contains static references to 10 localization keys.
    struct play {
      /// Value: Create a noun
      static let createNoun = Rswift.StringResource(key: "create.noun", tableName: "Play", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Get going
      static let proceedTitle = Rswift.StringResource(key: "proceed.title", tableName: "Play", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Give your noun something to say!
      static let subheadline = Rswift.StringResource(key: "subheadline", tableName: "Play", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pick a noun, yo
      static let chooseNoun = Rswift.StringResource(key: "choose.noun", tableName: "Play", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Play
      static let title = Rswift.StringResource(key: "title", tableName: "Play", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Say something
      static let playgroundTitle = Rswift.StringResource(key: "playground.title", tableName: "Play", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Swipe to pick a noun
      static let chooseCoachmark = Rswift.StringResource(key: "choose.coachmark", tableName: "Play", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Yo, you don't have any nouns. Create one and give it something to say!
      static let createNounSpeechBubble = Rswift.StringResource(key: "create.noun.speech.bubble", tableName: "Play", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You need a noun!
      static let noNouns = Rswift.StringResource(key: "no.nouns", tableName: "Play", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: sup home slice
      static let speechBubble = Rswift.StringResource(key: "speech.bubble", tableName: "Play", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Create a noun
      static func createNoun(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("create.noun", tableName: "Play", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Play", preferredLanguages: preferredLanguages) else {
          return "create.noun"
        }

        return NSLocalizedString("create.noun", tableName: "Play", bundle: bundle, comment: "")
      }

      /// Value: Get going
      static func proceedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("proceed.title", tableName: "Play", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Play", preferredLanguages: preferredLanguages) else {
          return "proceed.title"
        }

        return NSLocalizedString("proceed.title", tableName: "Play", bundle: bundle, comment: "")
      }

      /// Value: Give your noun something to say!
      static func subheadline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subheadline", tableName: "Play", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Play", preferredLanguages: preferredLanguages) else {
          return "subheadline"
        }

        return NSLocalizedString("subheadline", tableName: "Play", bundle: bundle, comment: "")
      }

      /// Value: Pick a noun, yo
      static func chooseNoun(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose.noun", tableName: "Play", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Play", preferredLanguages: preferredLanguages) else {
          return "choose.noun"
        }

        return NSLocalizedString("choose.noun", tableName: "Play", bundle: bundle, comment: "")
      }

      /// Value: Play
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "Play", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Play", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "Play", bundle: bundle, comment: "")
      }

      /// Value: Say something
      static func playgroundTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("playground.title", tableName: "Play", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Play", preferredLanguages: preferredLanguages) else {
          return "playground.title"
        }

        return NSLocalizedString("playground.title", tableName: "Play", bundle: bundle, comment: "")
      }

      /// Value: Swipe to pick a noun
      static func chooseCoachmark(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose.coachmark", tableName: "Play", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Play", preferredLanguages: preferredLanguages) else {
          return "choose.coachmark"
        }

        return NSLocalizedString("choose.coachmark", tableName: "Play", bundle: bundle, comment: "")
      }

      /// Value: Yo, you don't have any nouns. Create one and give it something to say!
      static func createNounSpeechBubble(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("create.noun.speech.bubble", tableName: "Play", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Play", preferredLanguages: preferredLanguages) else {
          return "create.noun.speech.bubble"
        }

        return NSLocalizedString("create.noun.speech.bubble", tableName: "Play", bundle: bundle, comment: "")
      }

      /// Value: You need a noun!
      static func noNouns(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no.nouns", tableName: "Play", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Play", preferredLanguages: preferredLanguages) else {
          return "no.nouns"
        }

        return NSLocalizedString("no.nouns", tableName: "Play", bundle: bundle, comment: "")
      }

      /// Value: sup home slice
      static func speechBubble(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("speech.bubble", tableName: "Play", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Play", preferredLanguages: preferredLanguages) else {
          return "speech.bubble"
        }

        return NSLocalizedString("speech.bubble", tableName: "Play", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.proposal` struct is generated, and contains static references to 4 localization keys.
    struct proposal {
      /// Value: Nouns are an experimental attempt to improve the formation of on-chain avatar communities
      static let message = Rswift.StringResource(key: "message", tableName: "Proposal", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Proposal %s
      static let identifier = Rswift.StringResource(key: "identifier", tableName: "Proposal", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Proposals
      static let title = Rswift.StringResource(key: "title", tableName: "Proposal", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: See all proposals
      static let seeAll = Rswift.StringResource(key: "see.all", tableName: "Proposal", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Nouns are an experimental attempt to improve the formation of on-chain avatar communities
      static func message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("message", tableName: "Proposal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Proposal", preferredLanguages: preferredLanguages) else {
          return "message"
        }

        return NSLocalizedString("message", tableName: "Proposal", bundle: bundle, comment: "")
      }

      /// Value: Proposal %s
      static func identifier(_ value1: UnsafePointer<CChar>, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("identifier", tableName: "Proposal", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Proposal", preferredLanguages: preferredLanguages) else {
          return "identifier"
        }

        let format = NSLocalizedString("identifier", tableName: "Proposal", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Proposals
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "Proposal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Proposal", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "Proposal", bundle: bundle, comment: "")
      }

      /// Value: See all proposals
      static func seeAll(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("see.all", tableName: "Proposal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Proposal", preferredLanguages: preferredLanguages) else {
          return "see.all"
        }

        return NSLocalizedString("see.all", tableName: "Proposal", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.settings` struct is generated, and contains static references to 9 localization keys.
    struct settings {
      /// Value: App Icon
      static let appIconTitle = Rswift.StringResource(key: "app.icon.title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Default
      static let appIconDefault = Rswift.StringResource(key: "app.icon.default", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Every day a new noun is released to auction, and as the timer runs down, bidding can get wild. Get notified when this glorious hour approaches.
      static let notificationNote = Rswift.StringResource(key: "notification.note", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: New Noun
      static let newNounNotificationTitle = Rswift.StringResource(key: "new-noun.notification.title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Noun O’Clock
      static let nounOclockNotificationTitle = Rswift.StringResource(key: "noun-oclock.notification.title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Settings
      static let title = Rswift.StringResource(key: "title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Share with friends
      static let shareFriends = Rswift.StringResource(key: "share.friends", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: System
      static let themeSystem = Rswift.StringResource(key: "theme.system", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Theme
      static let themeTitle = Rswift.StringResource(key: "theme.title", tableName: "Settings", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: App Icon
      static func appIconTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("app.icon.title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "app.icon.title"
        }

        return NSLocalizedString("app.icon.title", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Default
      static func appIconDefault(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("app.icon.default", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "app.icon.default"
        }

        return NSLocalizedString("app.icon.default", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Every day a new noun is released to auction, and as the timer runs down, bidding can get wild. Get notified when this glorious hour approaches.
      static func notificationNote(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notification.note", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "notification.note"
        }

        return NSLocalizedString("notification.note", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: New Noun
      static func newNounNotificationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new-noun.notification.title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "new-noun.notification.title"
        }

        return NSLocalizedString("new-noun.notification.title", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Noun O’Clock
      static func nounOclockNotificationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noun-oclock.notification.title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "noun-oclock.notification.title"
        }

        return NSLocalizedString("noun-oclock.notification.title", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Settings
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Share with friends
      static func shareFriends(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("share.friends", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "share.friends"
        }

        return NSLocalizedString("share.friends", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: System
      static func themeSystem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("theme.system", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "theme.system"
        }

        return NSLocalizedString("theme.system", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// Value: Theme
      static func themeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("theme.title", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "theme.title"
        }

        return NSLocalizedString("theme.title", tableName: "Settings", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.shared` struct is generated, and contains static references to 13 localization keys.
    struct shared {
      /// Value: Accessory
      static let accessory = Rswift.StringResource(key: "accessory", tableName: "Shared", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Background
      static let background = Rswift.StringResource(key: "background", tableName: "Shared", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Body
      static let body = Rswift.StringResource(key: "body", tableName: "Shared", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Done
      static let done = Rswift.StringResource(key: "done", tableName: "Shared", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Glasses
      static let glasses = Rswift.StringResource(key: "glasses", tableName: "Shared", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Head
      static let head = Rswift.StringResource(key: "head", tableName: "Shared", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Learn more
      static let learnMore = Rswift.StringResource(key: "learn.more", tableName: "Shared", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: N/A
      static let notApplicable = Rswift.StringResource(key: "not.applicable", tableName: "Shared", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remix
      static let remix = Rswift.StringResource(key: "remix", tableName: "Shared", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Share
      static let share = Rswift.StringResource(key: "share", tableName: "Shared", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unavailable
      static let unavailable = Rswift.StringResource(key: "unavailable", tableName: "Shared", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Untitled
      static let untitled = Rswift.StringResource(key: "untitled", tableName: "Shared", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: https://nouns.wtf
      static let nounsWebsite = Rswift.StringResource(key: "nouns.website", tableName: "Shared", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Accessory
      static func accessory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("accessory", tableName: "Shared", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Shared", preferredLanguages: preferredLanguages) else {
          return "accessory"
        }

        return NSLocalizedString("accessory", tableName: "Shared", bundle: bundle, comment: "")
      }

      /// Value: Background
      static func background(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("background", tableName: "Shared", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Shared", preferredLanguages: preferredLanguages) else {
          return "background"
        }

        return NSLocalizedString("background", tableName: "Shared", bundle: bundle, comment: "")
      }

      /// Value: Body
      static func body(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("body", tableName: "Shared", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Shared", preferredLanguages: preferredLanguages) else {
          return "body"
        }

        return NSLocalizedString("body", tableName: "Shared", bundle: bundle, comment: "")
      }

      /// Value: Done
      static func done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("done", tableName: "Shared", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Shared", preferredLanguages: preferredLanguages) else {
          return "done"
        }

        return NSLocalizedString("done", tableName: "Shared", bundle: bundle, comment: "")
      }

      /// Value: Glasses
      static func glasses(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("glasses", tableName: "Shared", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Shared", preferredLanguages: preferredLanguages) else {
          return "glasses"
        }

        return NSLocalizedString("glasses", tableName: "Shared", bundle: bundle, comment: "")
      }

      /// Value: Head
      static func head(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("head", tableName: "Shared", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Shared", preferredLanguages: preferredLanguages) else {
          return "head"
        }

        return NSLocalizedString("head", tableName: "Shared", bundle: bundle, comment: "")
      }

      /// Value: Learn more
      static func learnMore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("learn.more", tableName: "Shared", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Shared", preferredLanguages: preferredLanguages) else {
          return "learn.more"
        }

        return NSLocalizedString("learn.more", tableName: "Shared", bundle: bundle, comment: "")
      }

      /// Value: N/A
      static func notApplicable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("not.applicable", tableName: "Shared", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Shared", preferredLanguages: preferredLanguages) else {
          return "not.applicable"
        }

        return NSLocalizedString("not.applicable", tableName: "Shared", bundle: bundle, comment: "")
      }

      /// Value: Remix
      static func remix(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("remix", tableName: "Shared", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Shared", preferredLanguages: preferredLanguages) else {
          return "remix"
        }

        return NSLocalizedString("remix", tableName: "Shared", bundle: bundle, comment: "")
      }

      /// Value: Share
      static func share(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("share", tableName: "Shared", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Shared", preferredLanguages: preferredLanguages) else {
          return "share"
        }

        return NSLocalizedString("share", tableName: "Shared", bundle: bundle, comment: "")
      }

      /// Value: Unavailable
      static func unavailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unavailable", tableName: "Shared", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Shared", preferredLanguages: preferredLanguages) else {
          return "unavailable"
        }

        return NSLocalizedString("unavailable", tableName: "Shared", bundle: bundle, comment: "")
      }

      /// Value: Untitled
      static func untitled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("untitled", tableName: "Shared", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Shared", preferredLanguages: preferredLanguages) else {
          return "untitled"
        }

        return NSLocalizedString("untitled", tableName: "Shared", bundle: bundle, comment: "")
      }

      /// Value: https://nouns.wtf
      static func nounsWebsite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nouns.website", tableName: "Shared", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Shared", preferredLanguages: preferredLanguages) else {
          return "nouns.website"
        }

        return NSLocalizedString("nouns.website", tableName: "Shared", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.spaces` struct is generated, and contains static references to 10 localization keys.
    struct spaces {
      /// Value: Discord
      static let discordTitle = Rswift.StringResource(key: "discord.title", tableName: "Spaces", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Discourse
      static let discourseTitle = Rswift.StringResource(key: "discourse.title", tableName: "Spaces", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Etherscan
      static let etherscanTitle = Rswift.StringResource(key: "etherscan.title", tableName: "Spaces", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Nouns are an experimental attempt to improve the formation of on-chain avatar communities
      static let message = Rswift.StringResource(key: "message", tableName: "Spaces", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Spaces
      static let title = Rswift.StringResource(key: "title", tableName: "Spaces", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Twitter
      static let twitterTitle = Rswift.StringResource(key: "twitter.title", tableName: "Spaces", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: https://discord.gg/nouns
      static let discordLink = Rswift.StringResource(key: "discord.link", tableName: "Spaces", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: https://discourse.nouns.wtf
      static let discourseLink = Rswift.StringResource(key: "discourse.link", tableName: "Spaces", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: https://etherscan.io/address/0x9C8fF314C9Bc7F6e59A9d9225Fb22946427eDC03
      static let etherscanLink = Rswift.StringResource(key: "etherscan.link", tableName: "Spaces", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: https://twitter.com/nounsdao
      static let twitterLink = Rswift.StringResource(key: "twitter.link", tableName: "Spaces", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Discord
      static func discordTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("discord.title", tableName: "Spaces", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Spaces", preferredLanguages: preferredLanguages) else {
          return "discord.title"
        }

        return NSLocalizedString("discord.title", tableName: "Spaces", bundle: bundle, comment: "")
      }

      /// Value: Discourse
      static func discourseTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("discourse.title", tableName: "Spaces", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Spaces", preferredLanguages: preferredLanguages) else {
          return "discourse.title"
        }

        return NSLocalizedString("discourse.title", tableName: "Spaces", bundle: bundle, comment: "")
      }

      /// Value: Etherscan
      static func etherscanTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("etherscan.title", tableName: "Spaces", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Spaces", preferredLanguages: preferredLanguages) else {
          return "etherscan.title"
        }

        return NSLocalizedString("etherscan.title", tableName: "Spaces", bundle: bundle, comment: "")
      }

      /// Value: Nouns are an experimental attempt to improve the formation of on-chain avatar communities
      static func message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("message", tableName: "Spaces", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Spaces", preferredLanguages: preferredLanguages) else {
          return "message"
        }

        return NSLocalizedString("message", tableName: "Spaces", bundle: bundle, comment: "")
      }

      /// Value: Spaces
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title", tableName: "Spaces", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Spaces", preferredLanguages: preferredLanguages) else {
          return "title"
        }

        return NSLocalizedString("title", tableName: "Spaces", bundle: bundle, comment: "")
      }

      /// Value: Twitter
      static func twitterTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("twitter.title", tableName: "Spaces", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Spaces", preferredLanguages: preferredLanguages) else {
          return "twitter.title"
        }

        return NSLocalizedString("twitter.title", tableName: "Spaces", bundle: bundle, comment: "")
      }

      /// Value: https://discord.gg/nouns
      static func discordLink(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("discord.link", tableName: "Spaces", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Spaces", preferredLanguages: preferredLanguages) else {
          return "discord.link"
        }

        return NSLocalizedString("discord.link", tableName: "Spaces", bundle: bundle, comment: "")
      }

      /// Value: https://discourse.nouns.wtf
      static func discourseLink(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("discourse.link", tableName: "Spaces", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Spaces", preferredLanguages: preferredLanguages) else {
          return "discourse.link"
        }

        return NSLocalizedString("discourse.link", tableName: "Spaces", bundle: bundle, comment: "")
      }

      /// Value: https://etherscan.io/address/0x9C8fF314C9Bc7F6e59A9d9225Fb22946427eDC03
      static func etherscanLink(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("etherscan.link", tableName: "Spaces", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Spaces", preferredLanguages: preferredLanguages) else {
          return "etherscan.link"
        }

        return NSLocalizedString("etherscan.link", tableName: "Spaces", bundle: bundle, comment: "")
      }

      /// Value: https://twitter.com/nounsdao
      static func twitterLink(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("twitter.link", tableName: "Spaces", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Spaces", preferredLanguages: preferredLanguages) else {
          return "twitter.link"
        }

        return NSLocalizedString("twitter.link", tableName: "Spaces", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
